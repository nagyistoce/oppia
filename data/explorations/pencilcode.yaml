author_notes: ''
blurb: ''
default_skin: snapshots_v1
init_state_name: First State
language_code: en
objective: PencilCode embedding
param_changes:
- customization_args:
    parse_with_jinja: true
    value: '35'
  generator_id: Copier
  name: guess
param_specs:
  guess:
    obj_type: UnicodeString
schema_version: 5
skill_tags: []
skin_customizations:
  panels_contents:
    main:
    - customization_args:
        initialCode:
          value: 'speed 5

            dot yellow, 160

            fd 20

            rt 90

            fd 25

            dot black, 20

            bk 50

            dot black, 20

            bk 5

            rt 90

            fd 40

            pen black, 7

            lt 30

            lt 120, 35'
      gadget_id: PencilCode
      visible_in_states:
      - About this website
      - Contribute
states:
  Before Fall:
    content:
    - type: text
      value: '<div><span style="font-size: 1em;">Your instructions may look different
        from someone else''s but even if they are incomplete, I bet with some refinement
        we could get this turtle bouncing in no time! How fast is the turtle moving
        the moment before it starts to fall?</span><br></div>'
    interaction:
      customization_args: {}
      handlers:
      - name: submit
        rule_specs:
        - definition:
            inputs:
              x: 0.0
            name: Equals
            rule_type: atomic
            subject: answer
          dest: Bounce unrealistically
          feedback:
          - Yes, that's right our turtle should have an initial velocity, that's its
            speed and direction of zero.
          param_changes: []
        - definition:
            rule_type: default
          dest: Bounce unrealistically
          feedback:
          - Before it begins to fall, it should not be moving at all so lets give
            it an initial velocity of zero.
          param_changes: []
      id: NumericInput
    param_changes: []
  Bounce unrealistically:
    content:
    - type: text
      value: '<div><span style="font-size: 1em;">Our code may have grown a bit, but
        perhaps you will see some similarities to your own set of instructions. If
        you are familiar with the physics equations that describe a falling, you may
        be surprised to see them here but simulations are intended to mimic reality
        and we can use our equations in an environment like this. What is even better,
        is we can modify the equations as we see fit to experiment (if you have ever
        tried to modify gravity you''ll appreciate how useful a simulation can be).</span><br></div><div><br></div><div>We
        set up our environment at the top of our code, some of these will stay <b>constant</b>
        throughout the program like acceleration (see line ____) while others may
        <b>vary</b> like our velocity in the vertical direction, which we refer to
        as vy (see line ____). Once our simulation is running, 100 times per second,
        the turtle will move down until it reaches the bottom of the window (the floor),
        then it will safely bounce back up to the top where it started. Which line
        do you think changes the direction of the turtle when it reaches the bottom
        of the window?</div><div><br></div>'
    interaction:
      customization_args: {}
      handlers:
      - name: submit
        rule_specs:
        - definition:
            inputs:
              x: 0.0
            name: Equals
            rule_type: atomic
            subject: answer
          dest: Final State
          feedback:
          - Yes, when our turtle reaches the bottom of the window we want to change
            it's direction so we multiply its velocity by -1 to change it from a negative
            velocity (in this example, downward) to positive (upwards).
          param_changes: []
        - definition:
            rule_type: default
          dest: Bounce unrealistically
          feedback:
          - If you recall, velocity is speed and direction. If our turtle is moving
            downward with a velocity that is negative, then which line of the code
            will reverse that direction and make it positive?" then repeat the question.
          param_changes: []
      id: NumericInput
    param_changes: []
  Direction:
    content:
    - type: text
      value: The code above checks 100 times per second for where the mouse is and
        turns the turtle to that direction. Press play and move your mouse cursor
        around the turtle to watch it turn to whichever direction your cursor is pointing.
        <b>When you're ready to get this turtle moving, click next.</b>
    interaction:
      customization_args:
        buttonText:
          value: Next
      handlers:
      - name: submit
        rule_specs:
        - definition:
            rule_type: default
          dest: Velocity
          feedback: []
          param_changes: []
      id: Continue
    param_changes: []
  Final State:
    content:
    - type: text
      value: <div>Our turtle is having a wonderful time and is literally jumping for
        joy. Wheee! Feel free to play with the various numbers and the code itself.
        Try changing the color of the pen to help you follow what the turtle is doing,
        and use the log window at the bottom to follow the changing values of the
        variables. If you want to challenge yourself you could get the turtle to bounce
        up and down in a certain direction like this image below.</div><div><br></div><div>[IMAGE]</div><div><div><br></div><div>And,
        while you're at it, why not get the turtle to lose a little bit of its energy
        with each bounce like a ball or anything else might when it is bouncing like
        the image below?</div></div><div><br></div><div>[IMAGE]</div><div><br></div><div><div>There
        are a bunch of ways you could accomplish this and to help you get started
        try searching for the term [coefficient of restitution].</div><div><br></div><div>For
        more information and examples of these types of simulations check out PhET,
        the Matter and Interactions textbook.</div><div><br></div><div>This activity
        is aligned to the following &nbsp;skills, standards, etc.</div><div><br></div><div>If
        you would like to see how algorithms apply to computer science, the humanities,
        mathematics, or the sciences click here, otherwise continue to the next section
        to explore more ways to use algorithms to enhance what you are already doing
        in your classroom.</div></div>
    interaction:
      customization_args:
        buttonText:
          value: Continue
      handlers:
      - name: submit
        rule_specs:
        - definition:
            rule_type: default
          dest: END
          feedback: []
          param_changes: []
      id: Continue
    param_changes: []
  First State:
    content:
    - type: text
      value: <div>Physics is being applied in all sorts of new applications when today's
        scientists, engineers, animators, and many others develop models and simulations
        to make predictions and emulate the real world. We can teach the turtle to
        move and even bounce once we provide it with the right set of instructions
        which is also known as an algorithm.</div>
    interaction:
      customization_args:
        buttonText:
          value: Next
      handlers:
      - name: submit
        rule_specs:
        - definition:
            rule_type: default
          dest: Direction
          feedback: []
          param_changes: []
      id: Continue
    param_changes: []
  Reflection on Bouncing:
    content:
    - type: text
      value: '<div><span style="font-size: 1em;">Let''s teach the turtle to bounce.,
        dDon''t worry, it won''t get hurt.! Take a moment to write out the list of
        instructions you would use to explain to a young child what happens to a ball
        every second it is falling. There''s no need to include equations and if you
        would prefer, go ahead and draw a picture explaining what is happening every
        second as a ball is falling. Feel free to use your own words but try to make
        it as specific as possible and break it into steps. </span><b style="font-size:
        1em;">When you have the best list of instructions you can come up with, click
        next.</b><br></div>'
    interaction:
      customization_args:
        buttonText:
          value: Next
      handlers:
      - name: submit
        rule_specs:
        - definition:
            rule_type: default
          dest: Before Fall
          feedback: []
          param_changes: []
      id: Continue
    param_changes: []
  Velocity:
    content:
    - type: text
      value: '<div><span style="font-size: 1em;">Now we have set our turtle''s distance
        to 1 (see line ____) and added to the set of instructions that repeat 100
        times every second to move the turtle forward (see fd on line ____) by that
        distance. So as time passes, the turtle moves a certain distance over time
        in a particular direction which we call the turtle''s velocity. Press the
        play button and move your mouse as before, but now watch as the turtle follows
        you around. We''ve attached a pen to the turtle''s belly so you can see the
        path it took. Click next when you''re ready to move on.</span><br></div><div><br></div>'
    interaction:
      customization_args:
        buttonText:
          value: Next
      handlers:
      - name: submit
        rule_specs:
        - definition:
            rule_type: default
          dest: Reflection on Bouncing
          feedback: []
          param_changes: []
      id: Continue
    param_changes: []